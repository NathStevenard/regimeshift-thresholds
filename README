# regimeshift-thresholds (rsthresh)

Simple, robust **regime-shift threshold detection** for paleoclimate time series (glacial–interglacial scale).
Given a 4-column CSV (age + 3 series), the pipeline smooths the records, estimates a **global separator** between weak/strong regimes, detects **transition timings**, and summarizes the likely **threshold windows** in forcing space via 2D KDE.

- Minimal inputs, **3 smoothing options** (spline / low-pass / moving average)
- Global separator via **GMM/KDE/Otsu/Quantile/Fixed**
- Transition timing at **max |d(target)/dt|** near the separator crossing
- **KDE isodensity** contours for threshold windows (e.g., CO₂–RSL)
- Clean logs + JSON/CSV/SVG outputs

---

## Install

```bash
# Dev install (recommended while iterating)
pip install -e .

# Or with conda (example)
conda create -n rsthresh python=3.11 -y
conda activate rsthresh
pip install -e .

---

## Input format

CSV with exactly 4 columns (positional mapping):

age (ka BP, increasing)

target (series to segment into weak/strong regimes)

x (first forcing/axis for KDE)

y (second forcing/axis for KDE)

Column names can be anything (e.g., age, ISOWhybrid, CO2, RSL), the mapping is by position.
Age must be numeric and monotonic after sorting.

---

## Quickstart
from pathlib import Path
from rsthresh import ThresholdDetector
from rsthresh.plotting import plot_summary

det = (ThresholdDetector(
          dt_ka=1.0,
          smooth_method="spline",   # "spline" | "lowpass" | "ma"
          spline_s="auto",          # for "spline": "auto" (=N) or a float
          lp_cutoff_ka=20.0,        # for "lowpass": keep > 20 ka
          ma_window_ka=20.0,        # for "ma": centered window (ka)
          persist_ka=4.0,
          search_window_ka=4.0,
          sigma_window_ka=40.0,     # amplitude gate window (ka)
          min_delta_sigma=0.9,      # gate: |Δ| ≥ k·σ_local
      )
      .load_csv(Path("examples/data.csv"))
      .resample_and_smooth()
      .estimate_separator(method="gmm")   # or "kde" | "otsu" | "quantile" | "fixed"
      .detect_transitions()
      .compute_kde())

plot_summary(det, figpath="outputs/thresholds_summary.svg", show_mode=True)
det.results.transitions.to_csv("outputs/transitions.csv", index=False)
det.save_report("outputs/threshold_report.json")

---

## Outputs

outputs/Figures/thresholds_summary.svg — (a) smoothed target + separator + timings; (b) derivative + timings; (c) x–y KDE isodensity.

outputs/Results/transitions.csv — timing and direction (up=weak→strong, down=strong→weak), plus x/y at each transition.

outputs/Reports/threshold_report.json — params, counts, ranges, and metadata.

---

## Smoothing options (long-term only)

Choose one method for all three series (target/x/y):

Spline: smooth_method="spline", spline_s="auto" (default; very smooth, great for G–IG).

Low-pass Butterworth: smooth_method="lowpass", lp_cutoff_ka=20.0 (keeps periods > 20 ka; zero-phase).

Moving Average: smooth_method="ma", ma_window_ka=20.0 (intuitive GLT-like look).

Derivatives are computed on the smoothed curve (spline re-fit interpolating when using lowpass/MA).

---

## Separator methods

"gmm" (default): 2-component Gaussian Mixture; separator = density valley between component means.

"kde": 1D KDE; separator = minimum between the two dominant modes (fallback to median).

"otsu": Otsu’s histogram threshold (max inter-class variance).

"quantile": separator = quantile(y, q) (default q=0.5).

"fixed": user-provided S.

```
det.estimate_separator(method="fixed", S=0.12)
det.estimate_separator(method="quantile", q=0.55)

---

## Key parameters (typical G–IG settings)

dt_ka=1.0 — resampling step (ka).

persist_ka=4.0 — state persistence window (ka) to suppress flicker.

search_window_ka=4.0 — half-window around crossing to pick timing at max |d(target)/dt|.

sigma_window_ka=40.0 — window (ka) to compute local σ for amplitude gating.

min_delta_sigma=0.9 — non-dimensional amplitude gate; increase for stricter transitions.

kde_bandwidth="scott" — KDE bandwidth rule (or a scalar factor).

If you get too few transitions → lower min_delta_sigma or persist_ka, or reduce sigma_window_ka.
If you get too many → increase them.

---

## Logging

All steps log useful info (loaded rows, smoothing choice, separator value, number of transitions, KDE status).
You can pass your own logger:
```
det = ThresholdDetector(logger=my_logger, ...)

---

## Tests

A minimal pytest smoke test is included:
```
from rsthresh import __version__

Please cite using the CITATION.cff in the repository (GitHub shows a “Cite this repository” button).
If you archive releases on Zenodo, add the DOI there.

---

## License
MIT © 2025 Nathan Stevenard